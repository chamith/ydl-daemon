{"version":3,"sources":["Config.js","components/Item.js","components/ItemList.js","components/Request.js","components/RequestList.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Config","api_host_dev","getApiHost","window","location","protocol","host","replace","getEnv","Item","item","this","props","key","id","className","status","title","progress","Component","ItemList","items","map","Request","state","isModalOpen","request","url","avgPrg","value","onClick","event","setState","alt","width","src","isOpen","style","overlay","backgroundColor","content","border","height","left","top","onDelete","RequestList","requests","requestId","Header","handleSubmit","onAdd","handleInputChange","target","name","checked","console","log","schedule","Modal","setAppElement","type","onChange","variant","color","App","baseUrl","deleteRequest","axios","delete","then","res","getRequests","addRequest","post","sum","forEach","length","get","data","setInterval","React","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gTAceA,E,sCAbXC,aAAe,iB,KAEfC,WAAa,WAGT,OAFeC,OAAOC,SAASC,SAEb,KAAOF,OAAOC,SAASE,KAAKC,QAAQ,OAAQ,S,KAGlEC,OAAS,WACL,MAAO,QCRMC,E,uKAEjB,IAAMC,EAAOC,KAAKC,MAAMF,KACxB,OACE,yBAAKG,IAAKH,EAAKI,GAAIC,UAAU,eAC3B,yBAAKA,UAAU,gBAAgBL,EAAKM,OAApC,KACA,yBAAKD,UAAU,gBAAgBL,EAAKO,OACpC,yBAAKF,UAAU,gBAAgBL,EAAKQ,SAApC,W,GAP0BC,aCAbC,E,uKAEb,OACI,yBAAKL,UAAU,YACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBAAf,UACA,yBAAKA,UAAU,gBAAf,SACA,yBAAKA,UAAU,gBAAf,aAEJ,yBAAKA,UAAU,gBACVJ,KAAKC,MAAMS,MAAMC,KAAI,SAAAZ,GAAI,OACtB,kBAAC,EAAD,CAAMG,IAAKH,EAAKI,GAAIJ,KAAMA,a,GAXZS,a,gBCCjBI,E,kDACnB,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,aAAa,GAHE,E,qDAOT,IAAD,OACDC,EAAUf,KAAKC,MAAMc,QAC3B,OACE,yBAAKb,IAAKa,EAAQZ,GAAIC,UAAU,eAC9B,yBAAKA,UAAU,gBAAe,6BAAMW,EAAQC,KAAU,6BAAK,kBAAC,EAAD,CAAUN,MAAOK,EAAQL,UACpF,yBAAKN,UAAU,gBAAgBW,EAAQE,QACvC,yBAAKb,UAAU,gBAAe,4BAAQc,MAAOH,EAAQZ,GAAIgB,QAAS,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAEP,aAAa,MAAS,yBAAKQ,IAAI,cAAcC,MAAM,OAAOC,IAA8B,iBACnL,kBAAC,IAAD,CAAOC,OAAQzB,KAAKa,MAAMC,YAAaY,MAAO,CAAEC,QAAS,CAAEC,gBAAiB,QAAUC,QAAS,CAAEC,OAAQ,EAAGP,MAAO,MAAOQ,OAAQ,MAAOC,KAAM,MAAOC,IAAK,SACzJ,gDACA,oEAA0ClB,EAAQC,IAAlD,KACA,qCACA,6BACE,4BAAQG,QAAS,kBAAM,EAAKlB,MAAMiC,SAASnB,EAAQZ,MAAnD,UADF,OAEA,4BAAQgB,QAAS,kBAAM,EAAKE,SAAS,CAAEP,aAAa,MAApD,kB,GArByBN,aCAhB2B,E,uKACT,IAAD,OACP,OACE,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gBAAf,OACA,yBAAKA,UAAU,gBAAf,YACA,yBAAKA,UAAU,gBAAf,YAEF,yBAAKA,UAAU,gBAEXJ,KAAKC,MAAMmC,SAASzB,KAAI,SAAAI,GAAO,OAC7B,kBAAC,EAAD,CAASb,IAAKa,EAAQZ,GAAIY,QAASA,EAASmB,SAAU,SAACG,GAAD,OAAe,EAAKpC,MAAMiC,SAASG,e,GAZ9D7B,a,QCApB8B,E,kDAEnB,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IASRsC,aAAe,SAACnB,GACd,EAAKnB,MAAMuC,MAAM,EAAK3B,OACtB,EAAKQ,SAAS,CAAEP,aAAa,KAZZ,EAenB2B,kBAAoB,SAACrB,GACnB,IAAMsB,EAAStB,EAAMsB,OACfC,EAAOD,EAAOC,KACdzB,EAAiB,aAATyB,GAAuBD,EAAOE,QAAUF,EAAOxB,MAE7D2B,QAAQC,IAAR,yCAA8CH,EAA9C,wBAAkEzB,IAClE,EAAKG,SAAL,eACGsB,EAAOzB,KApBV,EAAKL,MAAQ,CACXC,aAAa,EACbE,IAAK,GACL+B,SAAU,GALK,E,qDA0BT,IAAD,OACPC,IAAMC,cAAc,SADb,MAEmBjD,KAAKa,MAAvBG,EAFD,EAECA,IAAK+B,EAFN,EAEMA,SACb,OACE,4BAAQ3C,UAAU,cAChB,6BACE,kBAAC,IAAD,CAAOqB,OAAQzB,KAAKa,MAAMC,YAAaY,MAAO,CAAEC,QAAS,CAAEC,gBAAiB,QAAUC,QAAS,CAAEC,OAAQ,EAAGP,MAAO,MAAOQ,OAAQ,MAAOC,KAAM,MAAOC,IAAK,SACzJ,oDACA,qCAAU,2BAAOiB,KAAK,OAAOP,KAAK,MAAMzB,MAAOF,EAAKmC,SAAUnD,KAAKyC,kBAAmBf,MAAO,CAAEH,MAAO,UACtG,qCACA,6BAAK,2BAAOoB,KAAK,WAAWO,KAAK,WAAWN,SAAUG,EAAUI,SAAUnD,KAAKyC,oBAA/E,kCACA,qCACA,6BACE,4BAAQtB,QAASnB,KAAKuC,cAAtB,UADF,OAEE,4BAAQpB,QAAS,kBAAM,EAAKE,SAAS,CAAEP,aAAa,MAApD,aAIN,yBAAKV,UAAU,YACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,gBAAe,4BAAQe,QAAS,kBAAM,EAAKE,SAAS,CAAEP,aAAa,KAAUsC,QAAQ,YAAYC,MAAM,WAAU,yBAAK/B,IAAI,WAAWC,MAAM,OAAOC,IAA8B,sB,GAhDvKhB,aC6DrB8C,E,4MAxDbC,SAAU,IAAIlE,GAASE,a,EAEvBiE,cAAgB,SAAAnB,GACdQ,QAAQC,IAAI,mBAAoBT,GAChCoB,IAAMC,OAAO,EAAKH,QAAU,iBAAiBlB,GAC1CsB,MAAK,SAAAC,GACJ,EAAKC,kB,EAIXC,WAAa,SAAC/C,GACZ0C,IAAMM,KAAK,EAAKR,QAAU,gBAAiBxC,GAC1C4C,MAAK,SAAAC,GACJf,QAAQC,IAAI,aACZ,EAAKe,kB,EAIT5C,OAAS,SAACF,GACR,IAAIiD,EAAM,EAEV,OADAjD,EAAQL,MAAMuD,SAAQ,SAAAlE,GAAI,OAAIiE,GAAOjE,EAAKQ,YAClB,MAAjBQ,EAAQL,OAA0C,IAAzBK,EAAQL,MAAMwD,OAAe,EAAGF,EAAMjD,EAAQL,MAAMwD,Q,EAGtFL,YAAc,WACZJ,IAAMU,IAAI,EAAKZ,QAAU,iBACtBI,MAAK,SAAAC,GACJ,IAAMxB,EAAWwB,EAAIQ,KACrBhC,EAASzB,KAAI,SAACI,GAGZ,OAFAA,EAAQE,OAAS,EAAKA,OAAOF,GAEtBA,KAET,EAAKM,SAAS,CAAEe,SAAUA,Q,EAGhCvB,MAAQ,CACNuB,SAAU,I,kEAGVpC,KAAK6D,cAELQ,YAAYrE,KAAK6D,YAAa,O,+BAItB,IAAD,OACP,OACE,yBAAKzD,UAAU,OACb,kBAAC,EAAD,CAAQoC,MAAO,SAACzB,GAAD,OAAW,EAAK+C,WAAW/C,MAC1C,kBAAC,EAAD,CAAaqB,SAAUpC,KAAKa,MAAMuB,SAAUF,SAAU,SAACG,GAAD,OAAa,EAAKmB,cAAcnB,W,GAnD5EiC,IAAM9D,WCKJ+D,QACW,cAA7B/E,OAAOC,SAAS+E,UAEe,UAA7BhF,OAAOC,SAAS+E,UAEhBhF,OAAOC,SAAS+E,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.72bf54c9.chunk.js","sourcesContent":["class Config {\n    api_host_dev = \"localhost:9001\";\n\n    getApiHost = () => {\n        var protocol = window.location.protocol;\n\n        return protocol + '//' + window.location.host.replace('3000', '5000')\n    }\n\n    getEnv = () => {\n        return \"dev\";\n    }\n}\n\nexport default Config;","import React, { Component } from 'react'\n\nexport default class Item extends Component {\n  render() {\n    const item = this.props.item\n    return (\n      <div key={item.id} className=\"divTableRow\">\n        <div className=\"divTableCell\">{item.status} </div>\n        <div className=\"divTableCell\">{item.title}</div>\n        <div className=\"divTableCell\">{item.progress}% </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Item from './Item'\nexport default class ItemList extends Component {\n    render() {\n        return (\n            <div className=\"divTable\">\n                <div className=\"divTableHeading\">\n                    <div className=\"divTableHead\">Status</div>\n                    <div className=\"divTableHead\">Title</div>\n                    <div className=\"divTableHead\">Progress</div>\n                </div>\n                <div className=\"divTableBody\">\n                    {this.props.items.map(item => (\n                        <Item key={item.id} item={item} />))}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport ItemList from './ItemList';\nimport Modal from 'react-modal';\nexport default class Request extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isModalOpen: false\n    }\n  }\n\n  render() {\n    const request = this.props.request\n    return (\n      <div key={request.id} className=\"divTableRow\">\n        <div className=\"divTableCell\"><div>{request.url}</div><div><ItemList items={request.items} /></div></div>\n        <div className=\"divTableCell\">{request.avgPrg}</div>\n        <div className=\"divTableCell\"><button value={request.id} onClick={(event) => this.setState({ isModalOpen: true })}><img alt='delete icon' width='24px' src={process.env.PUBLIC_URL + '/delete.png'} /></button>\n          <Modal isOpen={this.state.isModalOpen} style={{ overlay: { backgroundColor: 'grey' }, content: { border: 1, width: '40%', height: '20%', left: '30%', top: '40%' } }}>\n            <h2>Confirm Deletion</h2>\n            <div>Are you sure to delete the request '{request.url}'</div>\n            <div>&nbsp;</div>\n            <div>\n              <button onClick={() => this.props.onDelete(request.id)}>Submit</button>&nbsp;\n            <button onClick={() => this.setState({ isModalOpen: false })}>Cancel</button>\n            </div>\n          </Modal>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Request from './Request';\n\nexport default class RequestList extends Component {\n  render() {\n    return (\n      <div className=\"divTable\">\n        <div className=\"divTableHeading\">\n          <div className=\"divTableHead\">URL</div>\n          <div className=\"divTableHead\">Progress</div>\n          <div className=\"divTableHead\">Actions</div>\n        </div>\n        <div className=\"divTableBody\">\n          {\n            this.props.requests.map(request => (\n              <Request key={request.id} request={request} onDelete={(requestId) => this.props.onDelete(requestId)} />\n            ))\n          }\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Modal from 'react-modal';\n\nexport default class Header extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isModalOpen: false,\n      url: '',\n      schedule: 0\n    }\n    //this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleSubmit = (event) => {\n    this.props.onAdd(this.state);\n    this.setState({ isModalOpen: false })\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const name = target.name;\n    const value = name === 'schedule' ? !target.checked : target.value;\n\n    console.log(`handling the onChange event of ${name} changing to ${value}`);\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    Modal.setAppElement('#root');\n    const { url, schedule } = this.state;\n    return (\n      <header className=\"App-header\">\n        <div>\n          <Modal isOpen={this.state.isModalOpen} style={{ overlay: { backgroundColor: 'grey' }, content: { border: 1, width: '40%', height: '20%', left: '30%', top: '40%' } }}>\n            <h2>New Download Request</h2>\n            <div>URL: <input type='text' name='url' value={url} onChange={this.handleInputChange} style={{ width: '92%' }} /></div>\n            <div>&nbsp;</div>\n            <div><input name='schedule' type='checkbox' checked={!schedule} onChange={this.handleInputChange}/>Download during off peak hours</div>\n            <div>&nbsp;</div>\n            <div>\n              <button onClick={this.handleSubmit}>Submit</button>&nbsp;\n              <button onClick={() => this.setState({ isModalOpen: false })}>Cancel</button>\n            </div>\n          </Modal>\n        </div>\n        <div className=\"divTable\">\n          <div className=\"divTableRow\">\n            <div className=\"divTableCell\"><button onClick={() => this.setState({ isModalOpen: true })}  variant=\"contained\" color=\"primary\"><img alt='add icon' width='24px' src={process.env.PUBLIC_URL + '/add.png'}/></button></div>\n          </div>\n        </div>\n      </header>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Config from './Config';\nimport RequestList from './components/RequestList';\nimport Header from './components/Header';\n\nclass App extends React.Component {\n  baseUrl = new Config().getApiHost();\n\n  deleteRequest = requestId => {\n    console.log('delete requested', requestId)\n    axios.delete(this.baseUrl + '/api/requests/'+requestId)\n      .then(res => {\n        this.getRequests()\n      })\n  }\n\n  addRequest = (request) => {\n    axios.post(this.baseUrl + '/api/requests', request)\n    .then(res => {\n      console.log('submitted')\n      this.getRequests()\n\n    })\n  }\n  avgPrg = (request) => {\n    let sum = 0;\n    request.items.forEach(item => sum += item.progress)\n    return request.items == null || request.items.length === 0 ? 0: sum / request.items.length;\n  };\n\n  getRequests = () => {\n    axios.get(this.baseUrl + '/api/requests')\n      .then(res => {\n        const requests = res.data\n        requests.map((request) => {\n          request.avgPrg = this.avgPrg(request)\n          //console.log(`url:${request.url}, average:${request.avgPrg}`)\n          return request;\n        });\n        this.setState({ requests: requests })\n      })\n  }\n  state = {\n    requests: []\n  }\n  componentDidMount() {\n    this.getRequests();\n\n    setInterval(this.getRequests, 5000); // runs every 5 seconds.\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header onAdd={(request)=>this.addRequest(request)}/>\n        <RequestList requests={this.state.requests} onDelete={(requestId)=>this.deleteRequest(requestId)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}